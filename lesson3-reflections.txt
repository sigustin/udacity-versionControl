When would you want to use a remote repository rather than keeping all your work local?
  When you want to work from several computer, access your repo from another place with other device or simply when you want to work with other people on the project
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
   Because there could be code that's been added to GitHub that would be conflicting with the code your currently working, so you might want to have your code finished
   before worrying about code integration in the newest versions. Plus, it's rather annoying to see the code around you change while you're working.
Describe the differences between forks, clones, and branches. When would you use one instead of another?
   A branch allows you to test new implementations on your work based on a commit you've made. A clone gets everything from an online or a local repo onto your local computer.
   So does a fork, but it adds it on your GitHub account. You would use a fork when you want to work on a project that's owned by another person on GitHub.
   You would use a clone when you want to work locally on a repo. You would use a branch when you work locally on a repo that's yours.
What is the benefit of having a copy of the last known state of the remote stored locally?
   This way, you can see where was the last time your branch was up-to-date with the online branch.
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
   I would send files to collaborators using services such as Facebook, Google drive or Dropbox, and I would have to put an ID for each version
   of each files and a backup of every file somewhere on my local computer. A solution could also be to use an online service that allow multiple
   people to edit a file at the same time (but I would have to keep backup version by copy-pasting the file from time to time).
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
   When someone else might be working on the same files as you are or could have his work affected by your changes.
   Working on different branches keeps you from making changes that would break each other's work or that would break the entire project.
